// CodeBank.cpp : This file contains the 'main' function. Program execution begins and ends there.

#include <iostream>
#include <stdio.h>


#include "pointerLogic.h"
#include "binaryOperations.h"
#include "charBehavior.h"
#include "cStyleCoding.h"
/**************************************************/
/*                  POINTER LOGIC                 */
/**************************************************/
void pointerLogicEntry()
{
    printf("this module provides implementations of the following concepts:\n");
    printf("passPointerToFunction\n");
    printf("pointerLogic\n");
    printf("pointerToArrayIteration\n");
    printf("passPtrAsArgToGetScope\n");
}

/**************************************************/
/*                  GETTERS/SETTERS               */
/**************************************************/


/**************************************************/
/*                     ** and *&                  */
/**************************************************/


/**************************************************/
/*               TYPEDEFFED FUNC PTRS             */
/**************************************************/


/**************************************************/
/*              MEMBER VARIABLES                  */
/**************************************************/


/**************************************************/
/*                     SINGLETON                  */
/**************************************************/


/**************************************************/
/*         CLASS INSTANTIATION WITH NEW           */
/**************************************************/


/**************************************************/
/*               RETURN ENUMERATION               */
/**************************************************/


/**************************************************/
/*                     STD MAP                    */
/**************************************************/


/**************************************************/
/*                     STD QUEUE                  */
/**************************************************/


/**************************************************/
/*          GLOBAL AND LOCAL VARIABLES SCOPING    */
/**************************************************/


/**************************************************/
/*          TEMPLATE WITH MULTIPLE INPUTS         */
/**************************************************/


/**************************************************/
/*           LIMITS OF ACCESSING WITH             */
/*               "&", "*", "->", "."              */
/**************************************************/


/**************************************************/
/*          PUB, PRIV, PROT ACCESS OF CLASSES     */
/**************************************************/


/**************************************************/
/*    PRE-PROCESSOR MACROS FOR ARCH AND PLATFORMS */
/*               WHEN TO USE DEFINES              */
/**************************************************/


/**************************************************/
/*                CHAR BEHAVIOR                   */
/**************************************************/
void charBehaviorEntry()
{
    printf("this module provides implementations of the following concepts:\n");
    printf("charPointerToArray\n");
    printf("printCharArray\n");
    printf("charDifferences\n");
}

/**************************************************/
/*INSTANTIATION OF OTHER CLASSES INSIDE CONSTRCTRS*/
/**************************************************/


/**************************************************/
/* DELETING CONTAINERS WITHIN DESTRUCTORS        */
/**************************************************/


/**************************************************/
/*              DYNAMIC MEM ALLOC                 */
/**************************************************/


/**************************************************/
/*           DLL LOADING CPP, LIB, OBJ, DEF, MAP  */
/**************************************************/

/**************************************************/
/*              WRAPPER FUNCTIONS THAT CALL OTHER */
/*              MORE COMPLEX FUNCTIONS            */
/**************************************************/

/**************************************************/
/*              CALLBACK STRUCTURE                */
/**************************************************/


/**************************************************/
/*         MULTITHREAD,  MUTEXING, KEEP ALIVE     */
/**************************************************/

/**************************************************/
/*              POLLING WITH WHILE LOOPS          */
/**************************************************/


/**************************************************/
/*         TIMEOUTS, WAITING ON FUNC RETURNS      */
/**************************************************/


/**************************************************/
/*         EXCEPTION HANDLING, SIGNALS            */
/**************************************************/


/**************************************************/
/*         IPCONFIG AND OTHER STUFF               */
/**************************************************/

/**************************************************/
/*         BUFFER USAGE AND IO ACTIVITIES         */
/**************************************************/


/**************************************************/
/*         FUNCTION OVERLOADING                   */
/**************************************************/


/**************************************************/
/*         BOOLEAN FLAGS GLOBAL AND INTERNAL      */
/**************************************************/


/**************************************************/
/*         EVENT WRAPPERS                         */
/**************************************************/


/**************************************************/
/*         THIS                                   */
/**************************************************/


/**************************************************/
/*         DEBUGGING AND LOGGING                  */
/**************************************************/


/**************************************************/
/*         SOCKET COMMS AND PIPES                 */
/*         PROCESS OPERATIONS INSIDE SOCKET LOOPS */
/**************************************************/


/**************************************************/
/*          HAL with C                            */
/**************************************************/

/**************************************************/
/*          C STYLE CODING                        */
/**************************************************/
void cStyleCodingEntry()
{
    printf("this module provides implementations of the following concepts:\n");
    printf("cStyleStructInit\n");
}

/**************************************************/
/*              NULL GUARD DEREFERENCED PTRS      */
/**************************************************/

/**************************************************/
/*              BINARY OPERATIONS                 */
/**************************************************/
void binaryOperationsEntry()
{
    printf("this module provides implementations of the following concepts:\n");
    printf("bitMasking\n");
    printf("bitShifting\n");
    printf("printBinaries\n");
    printf("createChecksum\n");

}

/**************************************************/
/*              MAIN                              */
/**************************************************/
int main()
{

    std::cout << "hello there!" << std::endl;

    //unsigned char data[] = { 0x86, 0x10, 0xf1, 0x21, 0xe1 };
    //unsigned char* pData = data;
    ////unsigned char* pData = &(data[0]); -- SAME THING AS ABOVE
    //unsigned int len1 = 6;
    //unsigned char data2[] = { 0x68, 0x6a, 0xf1, 0x21, 0xe1};
    //unsigned char* pData2 = data2;
    //unsigned int len2 = 6;
    //createChecksum(pData, len1);
    //printf("\n\n");
    //createChecksum(pData2, len2);


    charPointerToArray();


    return 0;
}

